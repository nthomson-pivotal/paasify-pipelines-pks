---
resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.12.9

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: semver-config
  type: docker-image
  source:
    repository: itstarting/semver-config-concourse-resource
    tag: 1.0.0

resources:
- name: terraform-state
  type: terraform
  source:
    env_name: ((env_name))
    backend_type: s3
    backend_config:
      bucket: ((s3_artifact_bucket))
      key: ((env_name))/terraform.tfstate
      access_key: ((s3_access_key_id))
      secret_key: ((s3_secret_access_key))
    vars:
      env_name: ((env_name))
      dns_suffix: ((dns_suffix))
      region: ((region))
      ops_manager_ami: ""
    env:
      AWS_ACCESS_KEY_ID: ((admin_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((admin_secret_access_key))
      AWS_DEFAULT_REGION: ((region))

- name: pipelines-source
  type: git
  source:
    uri: https://github.com/nthomson-pivotal/paasify-pipelines-pas.git
    branch: master

- name: configuration-source
  type: git
  source:
    uri: ((configuration_source))
    branch: master
    private_key: ((git_private_key.private_key))

- name: product-config-opsman
  type: semver-config
  source:
    driver: git
    uri: ((configuration_source))
    branch: master
    private_key: ((git_private_key.private_key))
    config_file: ((env_name))/products.yml
    config_path: products.opsman
    version_path: products.opsman.product-version
    version_pattern: "m.n.p"

- name: platform-automation
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: "4.0.1"

- name: vm-state
  type: s3
  source:
    region_name: ((s3_region))
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_artifact_bucket))
    versioned_file: vm-state/((env_name))/state.yml
    initial_version: "0"

jobs:
- name: terraform
  serial: true
  public: false
  plan:
    - get: pipelines-source
    - get: configuration-source
    - put: terraform-state
      params:
        env_name: ((env_name))
        terraform_source: pipelines-source/terraform/aws
        delete_on_failure: false
        var_files:
        - configuration-source/((env_name))/terraform.tfvars

- name: create-opsman
  serial: true
  plan:
  - aggregate:
    - get: pipelines-source
    - get: product-config-opsman
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]
    - get: platform-automation-image
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: terraform-state
      passed: [terraform]
      trigger: true
    - get: configuration-source
      passed: [terraform]
    - get: vm-state
  - task: interpolate-global
    file: pipelines-source/tasks/interpolate.yml
    input_mapping:
      paasify-pipelines-pas: pipelines-source
      templates: pipelines-source
      terraform-state: terraform-state
    output_mapping:
      interpolated-templates: globals-interpolated
    params:
      TEMPLATE_PATH: vars
      PIVNET_TOKEN: ((pivnet_token))
      AWS_ACCESS_KEY_ID: ((admin_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((admin_secret_access_key))
  - task: interpolate-vars
    file: pipelines-source/tasks/interpolate.yml
    input_mapping:
      paasify-pipelines-pas: pipelines-source
      templates: pipelines-source
      terraform-state: terraform-state
    output_mapping:
      interpolated-templates: vars-interpolated
    params:
      TEMPLATE_PATH: products/opsman/vars
      PIVNET_TOKEN: ((pivnet_token))
      AWS_ACCESS_KEY_ID: ((admin_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((admin_secret_access_key))
  - task: download-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: product-config-opsman
      vars: vars-interpolated
      secrets: globals-interpolated
    params:
      CONFIG_FILE: semver-config.yaml
      VARS_FILES: vars/vars.yml secrets/global.yml
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: downloaded-product
      state: vm-state
      config: pipelines-source
      vars: vars-interpolated
    params:
      OPSMAN_CONFIG_FILE: products/opsman/config.yml
      STATE_FILE: state.yml
      VARS_FILES: vars/vars.yml
    on_success:
      do:
        - put: vm-state
          params:
            file: generated-state/state.yml
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: globals-interpolated
      config: vars-interpolated
    params:
      ENV_FILE: env.yml
      AUTH_CONFIG_FILE: auth.yml

- name: configure-director
  plan:
  - aggregate:
    - get: pipelines-source
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]
    - get: platform-automation-image
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: terraform-state
      trigger: true
      passed: [create-opsman]
    - get: configuration-source
      trigger: true
      passed: [create-opsman]
  - task: interpolate-global
    file: pipelines-source/tasks/interpolate.yml
    input_mapping:
      paasify-pipelines-pas: pipelines-source
      templates: pipelines-source
      terraform-state: terraform-state
    output_mapping:
      interpolated-templates: globals-interpolated
    params:
      TEMPLATE_PATH: vars
      PIVNET_TOKEN: ((pivnet_token))
      AWS_ACCESS_KEY_ID: ((admin_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((admin_secret_access_key))
  - task: interpolate-config
    file: pipelines-source/tasks/interpolate.yml
    input_mapping:
      paasify-pipelines-pas: pipelines-source
      templates: pipelines-source
      terraform-state: terraform-state
    output_mapping:
      interpolated-templates: config-interpolated
    params:
      TEMPLATE_PATH: products/director
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: config-interpolated
      env: globals-interpolated
      vars: interpolated-files
    params:
      ENV_FILE: env.yml
      DIRECTOR_CONFIG_FILE: config.yml

- name: apply-director-changes
  serial: true
  plan:
  - aggregate:
    - get: pipelines-source
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]
    - get: platform-automation-image
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: terraform-state
      passed: [configure-director]
    - get: configuration-source
      passed: [configure-director]
  - task: interpolate-global
    file: pipelines-source/tasks/interpolate.yml
    input_mapping:
      paasify-pipelines-pas: pipelines-source
      templates: pipelines-source
      terraform-state: terraform-state
    output_mapping:
      interpolated-templates: globals-interpolated
    params:
      TEMPLATE_PATH: vars
      PIVNET_TOKEN: ((pivnet_token))
      AWS_ACCESS_KEY_ID: ((admin_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((admin_secret_access_key))
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: globals-interpolated
    params:
      ENV_FILE: env.yml
